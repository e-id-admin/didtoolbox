namespace didtoolbox {
};

interface TrustDidWebProcessor {
    constructor();
    [Name=new_with_api_key]
    constructor(string api_key);
    string create(string url, [ByRef] Ed25519KeyPair key_pair);
    string read(string did_tdw);
    string update(string did_tdw, string did_doc, [ByRef] Ed25519KeyPair key_pair);
    string deactivate(string did_tdw, [ByRef] Ed25519KeyPair key_pair);
};

interface TrustDidWeb {
    [Name=create]
    constructor(string url, [ByRef] Ed25519KeyPair key_pair);
    [Name=read]
    constructor(string did_tdw);
    [Name=update]
    constructor(string did_tdw, string did_log, string did_doc, [ByRef] Ed25519KeyPair key_pair);
    [Name=deactivate]
    constructor(string did_tdw, string did_log, [ByRef] Ed25519KeyPair key_pair);
    string get_did();
    string get_did_log();
    string get_did_doc();
};

interface Ed25519Signature {
    [Name=from_multibase]
    constructor([ByRef] string multibase);
    string to_multibase();  
};

interface Ed25519SigningKey {
    [Name=from_multibase]
    constructor([ByRef] string multibase);
    string to_multibase();
};

interface Ed25519VerifyingKey {
    [Name=from_multibase]
    constructor([ByRef] string multibase);
    string to_multibase();
};

interface Ed25519KeyPair {
    [Name=generate]
    constructor();
    [Name=from]
    constructor([ByRef] string signing_key_multibase);
    Ed25519Signature sign(string message);
    Ed25519SigningKey get_signing_key();
    Ed25519VerifyingKey get_verifying_key();
};

interface DidDocumentState {
    [Name=from]
    constructor(string did_log);
    DidDoc validate();
};

dictionary Jwk {
  string kty;
  string crv;
  string x;
};

dictionary VerificationMethod {
    string id;
    string controller;
    string verification_type;
    string? public_key_multibase;
    Jwk? public_key_jwk;
};

dictionary DidDoc {
    sequence<string> context;
    string id;
    sequence<VerificationMethod> verification_method;
    sequence<VerificationMethod> authentication;
    sequence<VerificationMethod> capability_invocation;
    sequence<VerificationMethod> capability_delegation;
    sequence<VerificationMethod> assertion_method;
    sequence<string> controller;
    boolean? deactivated;
};